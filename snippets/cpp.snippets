# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r"))
	{
	    char buf[1024];
	    while (size_t len = fread(buf, 1, sizeof(buf), $2))
	        v.insert(v.end(), buf, buf + len);
	    fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:P2G}
	{
	    ${2}
	} // namespace $1
snippet nsns
	namespace ${1:P2G}
	{
	    namespace ${2:b}
	    {
	        ${3}
	    } // namespace $2
	} // namespace $1
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}
	{
	    public:
	        $1(${2});
	};
snippet test
	#define BOOST_TEST_DYN_LINK
	#define BOOST_TEST_MODULE ${1:`Filename('$1', 'name')`}
	#include <boost/test/unit_test.hpp>
	#include <string>
	using namespace ${2:P2G};

	BOOST_AUTO_TEST_CASE( ${3:$1}${4:Main} )
	{
	    BOOST_REQUIRE(${5:2 == 2});
	}
snippet std::co
	std::cout << ${1} << std::endl;
snippet co
	std::cout << ${1} << std::endl;
snippet ce
	std::cerr << ${1} << std::endl;
snippet std
	std::${1}
snippet <<
	<< "${1: }" << ${2}
snippet hhp2g
	#pragma once

	namespace P2G
	{
	    namespace olib
	    {
	        class ${1:`Filename('$1', 'name')`}
	            {
	                public:
	                    $1(${2});
	            };
	    } // namespace olib
	} // namespace P2G
snippet ccp2g
	#include "${1:`Filename('$1', 'name')`}.h"

	namespace P2G
	{
	    namespace olib {
	        $1::$1(${2})
	        {
	            ${3}
	        }
	    } // namespace olib
	} // namespace P2G
snippet hh
	#pragma once

	${2}
snippet cc
	#include "${1:`Filename('$1', 'name')`}.h"

	${2}
snippet for
	for(${1:int} ${2:i} = ${3:0}; $2 < ${4:count}; $2${5:++})
	{
	    ${6}
	}
snippet binc shared_ptr
	#include <boost/shared_ptr.hpp>
snippet binc make_shared
	#include <boost/make_shared.hpp>
snippet binc enable_shared_from_this
	#include <boost/enable_shared_from_this.hpp>
snippet binc foreach
	#include <boost/foreach.hpp>
snippet binc thread
	#include <boost/thread.hpp>
snippet binc function
	#include <boost/function.hpp>
snippet binc bind
	#include <boost/bind.hpp>
snippet binc asio
	#include <boost/asio.hpp>
snippet binc lexical_cast
	#include <boost/lexical_cast.hpp>
snippet binc shared_array
	#include <boost/shared_array.hpp>
snippet binc Posix time sleep
	#include <boost/date_time/posix_time/posix_time.hpp>
	${1:#include <boost/thread.hpp>}

snippet bsleep millisec Sleep milliseconds
	boost::this_thread::sleep(boost::posix_time::milliseconds(${1:500}));
snippet bsleep sec Sleep seconds
	boost::this_thread::sleep(boost::posix_time::seconds(${1:1}));

snippet tsh
	typedef boost::shared_ptr<${1:`Filename('$1', 'name')`}> $1_ptr;${2}
snippet make
	static ${1:/*classname*/}_ptr make(${2});${3}
snippet ::make
	${1:/*classname*/}_ptr make(${2})
	{
	    return $1_ptr(new $1(${3}));${4}
	}

snippet each
	BOOST_FOREACH(auto &${1:innervar}, ${2:iterable})
	{
	    ${3}
	}
